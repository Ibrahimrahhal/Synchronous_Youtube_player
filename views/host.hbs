<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <style media="screen">
    body{
padding: 0;
margin: 0;
    }
    .all{
      background: #121212; /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
      background-repeat: no-repeat;
      background-position: center;
      width: 100%;
      height: 100vh;
    }
    h1,h2,h3{
      font-family: "Open Sans";
      text-align:center;
      color:
      #ffffff;
    }
    h1{margin:0;
    padding:20px;
  background-color: #ffffff;
color: #121212;}
      .player-cont{
        width: 640px;
        height: 390px;
        margin: 0 auto;
        background-color: #121212;
        border: solid 3px #ffffff;
        border-radius: 5px;
/* padding: 10px; */
display: -webkit-box;
display: -ms-flexbox;
display: flex;
-webkit-box-align:center;
    -ms-flex-align:center;
        align-items:center;
-webkit-box-pack: center;
    -ms-flex-pack: center;
        justify-content: center;
      }
      .messages{
        position: absolute;
        z-index: 5;
        bottom: 0;
        right: 20px;
        width: 300px;
        background-color: #ffffff;
        color: #121212;
        font-family: "Open Sans";
        text-align: center;
        border-radius: 5px 5px 0 0;
        display: none;
      }
    .messages  .box{
        height: 0;
        /* transition: all 0.4s; */
        overflow: hidden;
        /* padding: 0 4px; */
        position: relative;
        border-radius: 5px 5px 0 0;
        text-align: left;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        -webkit-box-pack: justify;
            -ms-flex-pack: justify;
                justify-content: space-between;
      }
      .box h2{
        color: #121212;
        text-align: center;
      }
      .box .name{
        margin:0;
        color:#ffffff;
        background-color: #121212	;
        padding: 5px;
        display: inline-block;
       }
       .box .text{
         margin: 0;
         padding-left:15px;
         font-family: Cairo;

        }
      .m-active .box{
        height: 300px;
      }

      .label h4{
        margin: 10px;
      }
      .input{
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        width: 100%;
        -webkit-box-pack: center;
            -ms-flex-pack: center;
                justify-content: center;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
            -ms-flex-direction: column;
                flex-direction: column;
        /* position: absolute;
        bottom: 0; */

      }
      input{
        height: 30px;
        width: 230px;
-webkit-box-sizing: border-box;
        box-sizing: border-box;
border-style: none;
border-bottom:1px solid #121212;
border-radius: 5px;


      }
      input:focus{
        outline: 0;
      }
      .box-all{
        height: 220px;
        overflow-y: scroll;
      }
      .input .btn {
        background-color: #121212;
        color: #ffffff;
        font-family: "Open Sans";
        width: 110px;
        height: 30px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: center;
            -ms-flex-pack: center;
                justify-content: center;
        -webkit-box-align: center;
            -ms-flex-align: center;
                align-items: center;
        cursor: pointer;
        margin-top: 3px;
        border-radius: 5px;
      }
      .label{
        cursor: pointer;
      }
      /* width */
::-webkit-scrollbar {
  width: 5px;
}

/* Track */
::-webkit-scrollbar-track {

  border-radius: 3px;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #121212;
  border-radius: 3px;
}
.message{
  margin-top: 10px;
}
    </style>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400|Cairo" rel="stylesheet">

    <title>Watch</title>
  </head>
  <body>
    <div class="all">

<div class="text">


    <h1>Welcome</h1>
    <h3 id="loading">Loading Invitaion Code</h3>
    <h3 id="code"></h3>
    </div>
    <div class="player-cont">

    <div id="player"></div>
  </div>
  <div class="messages">
    <div class="box">
      <div class="box-all">

      <div class="box-title">
        <h2>Chat With Your Guest</h2>
      </div>
      <div class="mcont">

      </div>
    </div>

      <div class="input">
        <input type="text" class="m-text" value="">
        <div class="btn">
          send
        </div>
      </div>
    </div>
    <div class="label">
      <h4>Messages</h4>
    </div>
  </div>
</div>
    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      url = "{{url}}";
      var url_id;
      if (url.includes("watch")){
      var video_id = url.split('v&#x3D;')[1];
      var ampersandPosition = video_id.indexOf('&');
      console.log(ampersandPosition);
      if(ampersandPosition != -1) {
        video_id = video_id.substring(0, ampersandPosition);
        url_id = video_id;
      }else{
        url_id = video_id;
      }

    }
      else
      {
         if(url.includes("youtu.be")){
        var video_id = url.split('be/')[1];
        var ampersandPosition = video_id.indexOf('?');
        console.log(ampersandPosition);
        if(ampersandPosition != -1) {
          video_id = video_id.substring(0, ampersandPosition);
          url_id = video_id;
        }else{
          url_id = video_id;
        }

      }
          else {
            window.location.replace("/urlerror");

          }
}
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: video_id,
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          // setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.slim.js">

    </script>
    <script type="text/javascript">
    var outsideChange  =false;
    var connected = false;
    var audio = new Audio('../assets/sound.mp3');
    var socket = io("/host");
    socket.on("connect",()=>{
      console.log(url_id);
      socket.emit("url",url_id);

    });
    socket.on("Code",(code)=>{
      setTimeout(()=>{
      document.getElementById('code').innerHTML = code;
      document.getElementById("loading").innerHTML = "Invitation Code is";},3000)
    });
    socket.on("pairConnected",()=>{
      connected=true;
      $(".messages").css("display", "block");

    document.getElementById('code').innerHTML = "";
    document.getElementById("loading").innerHTML = "Your Guest is connected";

    });
    socket.on("getTime",()=>{
        socket.emit("seek",player.getCurrentTime());
    });
    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING && !done) {
        done = true;
      }else{
        if(event.data == YT.PlayerState.PAUSED){
          if(!outsideChange)
          socket.emit("pause");
          outsideChange=false;
        }
        if(event.data == YT.PlayerState.PLAYING && done){
          if(!outsideChange)
          socket.emit("play",player.getCurrentTime());
          outsideChange=false;

        }


      }
    }

    socket.on("pause",()=>{
      outsideChange=true;

      player.pauseVideo();
    });
    socket.on("play",(time)=>{
      outsideChange=true;
      player.playVideo();
      player.seekTo(time, true);
  });
  socket.on("pairDisconnected",()=>{
    document.getElementById('code').innerHTML = "";
    document.getElementById("loading").innerHTML = "Your Guest Has Disconnected";
    $(".messages").css("display", "none");

  });
socket.on("sms",(message)=>{
  addMessage(lastSender,"Guest",message);
  lastSender = "Guest";
  if($(".label h4").html()==="Messages")
  $(".label h4").html("You Have New Messages");
  audio.play();

});
    </script>
    <script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
    <script type="text/javascript">
    var lastSender="non";
    var boxIsActive = false;
      $(".label").click(()=>{
        $(".messages").toggleClass("m-active");
        if(boxIsActive){
           boxIsActive = false;
           $(".label h4").html("Messages");
         } else{
            boxIsActive=true;
            $(".label h4").html("Close");

          }

      });
      $('input').keypress(function (e) {
        var key = e.which;
        if(key == 13)  // the enter key code
        {
          let x= $("input").val();

          if(x===""){}else{
          $("input").val("");
          addMessage(lastSender,"You",x);
          socket.emit("sms",x);
          lastSender = "You";

        }
        }
      });
      $(".btn").click(()=>{
        let x= $("input").val();
        if(x===""){}else{
        $("input").val("");
        addMessage(lastSender,"You",x);
        socket.emit("sms",x);
        lastSender = "You";

      }
      });
      function addMessage(lastSender,name,message){
        let str="";
        if(lastSender===name){
         str = `<div class="message" style="margin:0;">
          <h5 class="text">${message}</h5>
        </div>`;
}else{
   str = `<div class="message">
   <h5 class="name">${name}</h5>
   <h5 class="text">${message}</h5>
 </div>`;
}
        let d=$(".mcont");
        let x=$(".box-all")
        str=d.html()+str;
        console.log(str);
        d.html(str);
        x.scrollTop(x.prop("scrollHeight"));


      }
    </script>
  </body>
</html>
